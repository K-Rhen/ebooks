options(scipen=5)
# export 8.5x5 inches

plot(voltdb$nodes, voltdb$tput, type="b", xlim=c(1.45,13),ylim=c(100000,500000),xlab="nodes", ylab="throughput")

# linear1.pdf
linear <- read.csv("~/repos/ebooks/scalability/linear.txt", sep="")
plot(linear$nodes, linear$tput, type="b",xlab="nodes", ylab="throughput", xlim=c(0,10), ylim=c(0,20000))

# linear2.pdf
> plot(linear$nodes, linear$tput, type="b",xlab="nodes", ylab="throughput", xlim=c(0,10), ylim=c(0,20000))
> par(new=T)
> plot(linear2$nodes[0:4], linear2$tput[0:4], type="b",xlab="nodes", ylab="throughput", xlim=c(0,10), ylim=c(0,20000))

# linear3.pdf
> plot(linear$nodes, linear$tput, type="b",xlab="nodes", ylab="throughput", xlim=c(0,10), ylim=c(0,20000))
> par(new=T)
> plot(linear2$nodes, linear2$tput, type="b",xlab="nodes", ylab="throughput", xlim=c(0,10), ylim=c(0,20000))

# ideal-linear.pdf
> eq=function(x){y=1800*x}
> eq2=function(x){y=800*x}
> plot(eq,1, 20, xlab="N", ylab="X",ylim=c(0,20*1800))
> par(new=TRUE)
> plot(eq2,1, 20, xlab="N", ylab="X",ylim=c(0,20*1800))

# amdahl.pdf
> eq=function(x){y=1800*x}
> am=function(x){y=1800*x/(1+.05*(x-1))}
> plot(eq,1, 20, xlab="N", ylab="X",ylim=c(0,20*1800),lty="dashed")
> par(new=TRUE)
> plot(am,1, 20, xlab="N", ylab="X",ylim=c(0,20*1800))

# usl.pdf
> usl=function(x){y=1800*x/(1+.05*(x-1)+.02*x*(x-1))}
> plot(eq,1, 20, xlab="N", ylab="X",ylim=c(0,20*1800),lty="dashed")
> par(new=TRUE)
> plot(am,1, 20, xlab="N", ylab="X",ylim=c(0,20*1800),lty="dashed")
> par(new=TRUE)
> plot(usl,1, 20, xlab="N", ylab="X",ylim=c(0,20*1800))

# cisco.pdf
benchmark <- read.csv("~/repos/ebooks/scalability/cisco.txt", sep="")
usl <- nls(tput ~ lambda*size/(1 + sigma * (size-1) + kappa * size * (size-1)), benchmark, start=c(sigma=0.1, kappa=0.01, lambda=1000))
summary(usl)
sigma <- coef(usl)['sigma']
kappa <- coef(usl)['kappa']
lambda <- coef(usl)['lambda']
usl=function(x){y=x*lambda/(1+sigma*(x-1)+kappa*x*(x-1))}
plot(usl, 0, max(benchmark$size)*2, xlab="Size", ylab="Throughput", lty="dashed")
points(benchmark$size, benchmark$tput)

# cisco-tput.pdf
u=function(x){(1+sigma*(x-1)+kappa*x*(x-1))/lambda}
v=function(x){(1+sigma*(x-1))/lambda}
w=function(x){(1+0*x)/lambda}
plot(u,0,max(benchmark$size)*2,xlab="Concurrency", ylab="Response Time", ylim=c(0,.0058))
par(new=TRUE)
plot(v,0,max(benchmark$size)*2,xlab="", ylab="", lty="dashed", ylim=c(0,.0058))
par(new=TRUE)
plot(w,0,max(benchmark$size)*2,xlab="", ylab="", lty="dashed", ylim=c(0,.0058))
points(benchmark$size, benchmark$size/benchmark$tput)

# paypal.pdf

nodejs <- read.csv("~/repos/ebooks/scalability/nodejs.txt", sep="")
usl.node <- nls(node ~ lambda*conc/(1 + sigma * (conc-1) + kappa * conc * (conc-1)), nodejs, start=c(sigma=0.1, kappa=0.01, lambda=1000))
node.sigma = coef(usl.node)['sigma']
node.kappa = coef(usl.node)['kappa']
node.lambda = coef(usl.node)['lambda']
usl.java <- nls(java ~ lambda*conc/(1 + sigma * (conc-1) + kappa * conc * (conc-1)), nodejs, start=c(sigma=0.1, kappa=0.01, lambda=1000))
java.sigma = coef(usl.java)['sigma']
java.kappa = coef(usl.java)['kappa']
java.lambda = coef(usl.java)['lambda']

# override...
java.sigma = .000011
java.lambda = 1.8

node.usl=function(x){node.lambda*x/(1+node.sigma*(x-1)+node.kappa*x*(x-1))}
java.usl=function(x){java.lambda*x/(1+java.sigma*(x-1)+java.kappa*x*(x-1))}
plot(node.usl,0,35,xlab="Users", ylab="Throughput", ylim=c(0,35))
par(new=TRUE)
plot(java.usl,0,35,xlab="Users", ylab="Throughput", lty="dashed",ylim=c(0,35))
points(nodejs$conc, nodejs$node)
points(nodejs$conc, nodejs$java)

# webapp.pdf
webapp <- read.csv("~/repos/ebooks/scalability/webapp.csv", sep="")
usl.model <- nls(tput ~ lambda*conc/(1 + sigma * (conc-1) + kappa * conc * (conc-1)), webapp, start=c(sigma=0.1, kappa=0.01, lambda=1000))
node.sigma = coef(usl.node)['sigma']
node.kappa = coef(usl.node)['kappa']
node.lambda = coef(usl.node)['lambda']
usl.java <- nls(java ~ lambda*conc/(1 + sigma * (conc-1) + kappa * conc * (conc-1)), nodejs, start=c(sigma=0.1, kappa=0.01, lambda=1000))
java.sigma = coef(usl.java)['sigma']
java.kappa = coef(usl.java)['kappa']
java.lambda = coef(usl.java)['lambda']

# logscale.pdf
> usl=function(x){y=5*x/(1+.2*(x-1)+.2*x*(x-1))}
> lsl=function(x){y=5*x/(1+.2*(x-1)+.2*log(x)*(x-1))}
> plot(usl,0,20,xlab="N",ylab="X(N)",ylim=c(0,10))
> par(new=TRUE)
> plot(lsl,0,20,xlab="N",ylab="X(N)",ylim=c(0,10),lty="dashed")

# handlersocket.pdf
options(scipen=5)
hs <- read.csv("~/repos/ebooks/scalability/handlersocket.txt", sep="")
usl.model <- nls(tput ~ lambda*conc/(1 + sigma * (conc-1) + kappa * conc * (conc-1)), hs, start=c(sigma=0.1, kappa=0.01, lambda=1000))
sigma <- coef(usl.model)['sigma']
kappa <- coef(usl.model)['kappa']
lambda <- coef(usl.model)['lambda']
usl=function(x){y=x*lambda/(1+sigma*(x-1)+kappa*x*(x-1))}
plot(usl, 0, max(hs$conc)*2, xlab="Connections", ylab="Throughput", lty="dashed")
points(hs$conc, hs$tput)

# logscale-2.pdf
> usl.model <- nls(tput ~ lambda*conc/(1 + sigma * (conc-1) + kappa * log(conc) * (conc-1)), hs, start=c(sigma=0.1, kappa=0.01, lambda=1000))
> sigma <- coef(usl.model)['sigma']
> kappa <- coef(usl.model)['kappa']
> lambda <- coef(usl.model)['lambda']
> usl=function(x){y=x*lambda/(1+sigma*(x-1)+kappa*log(x)*(x-1))}
> plot(usl, 0, max(hs$conc)*2, xlab="Connections", ylab="Throughput", lty="dashed")
> points(hs$conc, hs$tput)

# aissl.pdf
usl.model <- nls(tput ~ lambda*conc/(1 + sigma * (conc-1) + kappa * sqrt(conc) * (conc-1)), hs, start=c(sigma=0.1, kappa=0.01, lambda=1000))
sigma <- coef(usl.model)['sigma']
kappa <- coef(usl.model)['kappa']
lambda <- coef(usl.model)['lambda']
usl=function(x){y=x*lambda/(1+sigma*(x-1)+kappa*sqrt(x)*(x-1))}
plot(usl, 0, max(hs$conc)*2, xlab="Connections", ylab="Throughput", lty="dashed", ylim=c(0,120000))
points(hs$conc, hs$tput)
par(new=TRUE)
sigma=-0.0154290
kappa=0.0234922
lambda=9921.9533628
usl=function(x){y=x*lambda/(1+sigma*(x-1)+kappa*log(x)*(x-1))}
plot(usl, 0, max(hs$conc)*2, xlab="", ylab="", ylim=c(0,120000))

# superlinear.pdf
> usl=function(x){y=x*lambda/(1+sigma*(x-1)+kappa*x*(x-1))}
> lambda=1.4
> kappa=0.08
> sigma=-.4
> plot(usl, 0,15,xlab="Size", ylab="Throughput", ylim=c(0,10))
> l=function(x){y=lambda*x}
> plot(usl, 0,15,xlab="Size", ylab="Throughput", ylim=c(0,10))
> par(new=TRUE)
> plot(l,0,15,ylab="", xlab="", ylim=c(0,10),lty="dashed")

# quadratic.pdf
benchmark <- read.csv("~/repos/ebooks/scalability/cisco.txt", sep="")
> usl <- nls(tput ~ a+b*(size-c)*(size-c), benchmark, start=c(a=12000,b=-.05,c=25))
> a=coef(usl)['a']
> b=coef(usl)['b']
> c=coef(usl)['c']
> fun=function(x){a+b*(x-c)^2}
> plot(fun, 0,70, xlab="Threads", ylab="Throughput", ylim=c(-500,15000))
> points(benchmark$size, benchmark$tput)
> abline(1,0)

# not-a-function.pdf
> benchmark <- read.csv("~/repos/ebooks/scalability/cisco.txt", sep="")
> plot(benchmark$tput, benchmark$size/benchmark$tput, xlab="Throughput", ylab="Latency")

# hockey.pdf
> u=function(x){1/(1-x)}
> plot(u,0,1,xlab="Utilization", ylab="Residence Time",ylim=c(0,25))
> par(new=TRUE)
> u=function(x){x/x}
> plot(u, 0, 1, xlab="", ylab="", ylim=c(0,25), lty="dashed")

# cisco-2.pdf
# cisco-3.pdf
benchmark <- read.csv("~/repos/ebooks/scalability/cisco-prefix.txt", sep="")
usl <- nls(tput ~ lambda*size/(1 + sigma * (size-1) + kappa * size * (size-1)), benchmark, start=c(sigma=0.1, kappa=0.01, lambda=1000))
summary(usl)
sigma <- coef(usl)['sigma']
kappa <- coef(usl)['kappa']
lambda <- coef(usl)['lambda']
usl=function(x){y=x*lambda/(1+sigma*(x-1)+kappa*x*(x-1))}
plot(usl, 0, max(benchmark$size)*8, xlab="Size", ylab="Throughput")
points(benchmark$size, benchmark$tput)
u=function(x){(1+sigma*(x-1)+kappa*x*(x-1))/lambda}
plot(u,0,max(benchmark$size)*3,xlab="Concurrency", ylab="Response Time")
points(benchmark$size, benchmark$size/benchmark$tput)

# handlersocket-2.pdf
options(scipen=5)
hs <- read.csv("~/repos/ebooks/scalability/handlersocket.txt", sep="")
sigma = .055
kappa = .0001
lambda = 10821
usl=function(x){y=x*lambda/(1+sigma*(x-1)+kappa*x*(x-1))}
plot(usl, 0, 200, xlab="Connections", ylab="Throughput")
points(hs$conc, hs$tput)

# cisco-x-v-r-amdahl.pdf
benchmark <- read.csv("~/repos/ebooks/scalability/cisco.txt", sep="")
usl <- nls(tput ~ lambda*size/(1 + sigma * (size-1)), benchmark, start=c(sigma=0.1, lambda=1000))
summary(usl)
sigma <- coef(usl)['sigma']
lambda <- coef(usl)['lambda']
f=function(x){(sigma-1)/(sigma*x-lambda)}
plot(f,1,lambda/sigma*.8, ylab="Latency", xlab="Throughput")
points(benchmark$tput, benchmark$size/benchmark$tput)

# r-function-x-amdahl.pdf
sigma = .06
lambda = 40
f=function(x){(sigma-1)/(sigma*x-lambda)}
plot(f,1,lambda/sigma*.9, ylab="Latency", xlab="Throughput")

# nose.pdf
lambda=40
sigma=.06
kappa=.06
f=function(x){(lambda*x)/(1+sigma*(x-1)+kappa*x*(x-1))}
N = c(1:100)
vals = data.frame(conc=N/15, tput=f(N/15))
plot(vals$tput, vals$conc/vals$tput, xlab="Throughput", ylab="Latency")

# x-function-r.pdf
xr=function(x){(sqrt(sigma^2+kappa^2+2*kappa*(2*lambda*x+sigma-2))-kappa+sigma)/(2*kappa*x)}
plot(xr, 0.025, .25, ylab="Throughput", xlab="Latency")
#points(vals$conc/vals$tput, vals$tput)

# nose-equation.pdf
xmax=f(sqrt((1-sigma)/kappa))
d=function(x){(-sqrt(x^2*(kappa^2+2*kappa*(sigma-2)+sigma^2)+2*lambda*x*(kappa-sigma)+lambda^2)+kappa*x+lambda-sigma*x)/(2*kappa*x^2) }
e=function(x){(sqrt(x^2*(kappa^2+2*kappa*(sigma-2)+sigma^2)+2*lambda*x*(kappa-sigma)+lambda^2)+kappa*x+lambda-sigma*x)/(2*kappa*x^2)}
plot(d, 0, xmax, ylim=c(0,.1), xlim=c(0,85),xlab="Throughput", ylab="Latency")
par(new=T)
plot(e, 45, xmax, ylim=c(0,.1), xlim=c(0,85),lty="dashed",xlab="",ylab="")

# latency-vs-througphut.pdf
benchmark <- read.csv("~/repos/ebooks/scalability/cisco.txt", sep="")
usl <- nls(tput ~ lambda*size/(1 + sigma * (size-1) + kappa * size * (size-1)), benchmark, start=c(sigma=0.1, kappa=0.01, lambda=1000))
sigma <- coef(usl)['sigma']
kappa <- coef(usl)['kappa']
lambda <- coef(usl)['lambda']
xr=function(x){(sqrt(sigma^2+kappa^2+2*kappa*(2*lambda*x+sigma-2))-kappa+sigma)/(2*kappa*x)}
plot(xr, 0, 0.004, xlab="Latency", ylab="Throughput", lty="dashed")
points(benchmark$size/benchmark$tput, benchmark$tput)


# mpp-speedup.pdf
> sigma=.06
> kappa=.06
> lambda=40
> usl=function(x){(1+sigma*(x-1)+kappa*x*(x-1))/(x*lambda)}
> amdahl=function(x){(1+sigma*(x-1))/(x*lambda)}
> linear=function(x){1/(x*lambda)}
> plot(usl, 1, 30, ylab="Latency", xlab="Degree of Parallelism", ylim=c(0, 0.03))
> par(new=TRUE)
> plot(amdahl, 1, 30, ylab="", xlab="", ylim=c(0, 0.03), lty="dashed")
> par(new=TRUE)
> plot(linear, 1, 30, ylab="", xlab="", ylim=c(0, 0.03), lty="dashed")
